from telethon import TelegramClient, events
import time
import os
from loguru import logger
from .config_controller import ConfigController
import pytz
import datetime
from telethon.tl.functions.messages import GetHistoryRequest
import asyncio


class Client:
    def __init__(self):
        self.config = ConfigController.get_config()

        self.client = TelegramClient(
            os.path.join('session', 'account_session'),
            self.config['account_api_id'],
            self.config['account_api_hash']
        )

        logger.info('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –∞–∫–∫–∞—É–Ω—Ç')

        utc = pytz.timezone('UTC')
        self.last_message_check = datetime.datetime.now(tz=utc)

        self.command_prefix = '~!'
        self.commands = {
            'info': self._command_info,
            'add': self._command_add,
            'del': self._command_del,
            'help': self._command_help,

        }

    async def start(self):
        """
        –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
        """
        await self.client.start(
            phone=self._get_phone,
            code_callback=self._enter_code,
            password=self._enter_password,
        )

        logger.info(f'–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')

        self.client.add_event_handler(self._new_message_handler, events.NewMessage(pattern=r'.+'))
        await self.main_loop()

    async def main_loop(self):
        """
        –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
        —Ç—É—Ç –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥–∏,
        –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏–Ω–ø—É—Ç
        –∫–∞–Ω–∞–ª–∞ –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è –ø–æ –∞—É—Ç–≥—Ä—É–ø–ø–∞–º
        """
        while True:
            logger.debug('cycle')
            self.config = ConfigController.get_config()
            groups = await self._get_groups()

            for group in groups:
                for input_channel in group['inputs']:
                    if not input_channel:
                        continue

                    new_messages = await self._get_post_history(input_channel)

                    for output_channel in group['outputs']:
                        if not output_channel:
                            continue

                        for msg in new_messages:

                            # if words whitelist enabled
                            if group['words']:
                                if not self._check_text_entry(msg.message, group['words']):
                                    logger.debug(f"–í –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–æ–≤–∞ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞")
                                    continue

                            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id} –≤ {output_channel}")
                            await self.client.send_message(output_channel, msg)

            utc = pytz.timezone('UTC')
            self.last_message_check = datetime.datetime.now(tz=utc)

            await asyncio.sleep(self.config['delay'])

    async def _new_message_handler(self, event):
        msg_text = event.message.message

        for raw_command, command_callback in self.commands.items():
            command = self.command_prefix + raw_command

            if msg_text[:len(command)] == command:
                await command_callback(event.chat_id, msg_text.replace(command, '').strip())

    async def _command_info(self, chat_id, text):
        config = ConfigController.get_config()
        text = "**–ì—Ä—É–ø–ø—ã:**\n\n"

        for group in config['groups']:
            group_txt = f'üî∏ –ò–º—è –≥—Ä—É–ø–ø—ã: {group["name"]}\n'\
                f'üîΩ –í—Ö–æ–¥–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {", ".join(group["inputs"])}\n'\
                f'‚û°Ô∏è –í—ã—Ö–æ–¥–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {", ".join(group["outputs"])}\n'\
                f'#Ô∏è‚É£ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤: {", ".join(group["words"])}\n\n'

            text += group_txt

        await self.client.send_message(chat_id, text)

    async def _command_add(self, chat_id, text):
        data = text.split('\n')
        if len(data) < 3:
            await self.client.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã")
            return

        group = {
            "name": data[0],
            "inputs": [s.strip() for s in data[1].split(',')],
            "outputs": [s.strip() for s in data[2].split(',')],
            "words": []
        }

        if len(data) >= 4:
            group["words"].extend([s.strip() for s in data[3].split(',')]),

        ConfigController.add_group(group)

        await self.client.send_message(chat_id, "‚úÖ")

    async def _command_del(self, chat_id, text):
        ConfigController.del_group(text)

        await self.client.send_message(chat_id, "‚úÖ")

    async def _command_help(self, chat_id, text):
        text = "üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö\n\n"\
            f"`{self.command_prefix + 'help'}` - –≤—ã–≤–æ–¥–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n" \
            f"`{self.command_prefix + 'info'}` - –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö\n\n" \
            f"`{self.command_prefix + 'add'} [–∏–º—è –≥—Ä—É–ø–ø—ã]\n[–≤—Ö–æ–¥–Ω—ã–µ –∫–∞–Ω–∞–ª—ã]\n[–≤—ã—Ö–æ–¥–Ω—ã–µ –∫–∞–Ω–∞–ª—ã]\n[–±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤]`\n"\
            f" - –¥–æ–±–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É, –≤–µ–∑–¥–µ –∫—Ä–æ–º–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª—è—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"\
            f"**–ü—Ä–∏–º–µ—Ä:**\n`{self.command_prefix}add new group\ntest 1, test channel 2\ntest channel 3\n#tag`\n\n" \
            f"`{self.command_prefix + 'del'} [–∏–º—è –≥—Ä—É–ø–ø—ã]` - —É–¥–∞–ª—è–µ—Ç –≥—Ä—É–ø–ø—É"\


        await self.client.send_message(chat_id, text)

    async def _get_post_history(self, channel):
        """
        –û—Ç–¥–∞—ë—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞
        –ù–µ –¥—É–±–ª–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Ç–æ–º—É —á—Ç–æ
        –ú—ã —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á—Ç–æ –±—ã –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏
        –ü—Ä–∏—Å–ª–∞–Ω—ã –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—É—â–µ–≥–æ —Ü–∏–∫–ª–∞
        """
        history = await self.client(
            GetHistoryRequest(
                peer=channel,
                offset_id=0,
                offset_date=None,
                add_offset=0,
                limit=10,
                max_id=0,
                min_id=0,
                hash=0)
        )

        messages = history.messages
        new_message = [msg for msg in messages if msg.date > self.last_message_check]

        return new_message

    @staticmethod
    def _check_text_entry(text, filters_list):
        for filter_text in filters_list:
            if filter_text in text:
                return True

        return False

    async def _get_groups(self):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç –±—É–∫–≤–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö –≤ –∞–π–¥–∏—à–Ω–∏–∫–∏
        """
        groups_list = []

        for group in self.config['groups']:
            groups_list.append(group)

            groups_list[-1]['inputs'] = [await self._get_chat_id(g) for g in groups_list[-1]['inputs']]
            groups_list[-1]['outputs'] = [await self._get_chat_id(g) for g in groups_list[-1]['outputs']]

        return groups_list

    def _get_phone(self):
        return self.config['account_phone']

    @staticmethod
    def _enter_code():
        return input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram: ')

    @staticmethod
    def _enter_password():
        return input('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ')

    async def _get_chat_id(self, chat_name):
        async for dialog in self.client.iter_dialogs():
            if dialog.name == chat_name:
                return dialog.id

        logger.error(f"–ß–∞—Ç —Å –∏–º–µ–Ω–µ–º {chat_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–∏–∞–ª–æ–≥–æ–≤, –æ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
        return None


